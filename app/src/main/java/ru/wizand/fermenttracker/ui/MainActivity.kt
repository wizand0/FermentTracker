package ru.wizand.fermenttracker.ui

import android.app.ProgressDialog
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.view.ViewGroup
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.updateLayoutParams
import androidx.lifecycle.lifecycleScope
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.AppBarConfiguration
import androidx.navigation.ui.setupActionBarWithNavController
import androidx.navigation.ui.setupWithNavController
import androidx.preference.PreferenceManager
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import ru.wizand.fermenttracker.R
import ru.wizand.fermenttracker.data.db.AppDatabase
import ru.wizand.fermenttracker.data.db.RecipeTemplates
import ru.wizand.fermenttracker.databinding.ActivityMainBinding
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private lateinit var navController: NavController
    private lateinit var appBarConfiguration: AppBarConfiguration
    private var progressDialog: ProgressDialog? = null

    companion object {
        private const val CREATE_FILE_REQUEST_CODE = 1001
        private const val PICK_FILE_REQUEST_CODE = 1002
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        applyDarkThemeSetting()

        // Toolbar
        setSupportActionBar(binding.toolbar)

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        val navHostFragment =
            supportFragmentManager.findFragmentById(R.id.nav_host_fragment) as NavHostFragment
        navController = navHostFragment.navController
        binding.bottomNavigation.setupWithNavController(navController)

        // –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        appBarConfiguration = AppBarConfiguration(
            setOf(
                R.id.dashboardFragment,
                R.id.batchListFragment,
                R.id.recipesFragment,
                R.id.settingsFragment
            )
        )
        setupActionBarWithNavController(navController, appBarConfiguration)

        // üëá –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã —Å–Ω–∏–∑—É –ø–æ–¥ –ø–∞–Ω–µ–ª—å—é
        ViewCompat.setOnApplyWindowInsetsListener(binding.bottomNavigation) { view, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            view.setPadding(systemBars.left, 0, systemBars.right, 0)
            insets
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç—å—é –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏
        navController.addOnDestinationChangedListener { _, destination, _ ->
            when (destination.id) {
                R.id.dashboardFragment,
                R.id.batchListFragment,
                R.id.recipesFragment,
                R.id.settingsFragment,
                R.id.batchDetailFragment,
                R.id.recipesFragment -> {
                    binding.bottomNavigation.visibility = View.VISIBLE
                }
                else -> {
                    binding.bottomNavigation.visibility = View.GONE
                }
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–Ω–∏–∑—É –¥–ª—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
        binding.navHostFragment.post {
            val bottomNavHeight = binding.bottomNavigation.height
            binding.navHostFragment.setPadding(
                binding.navHostFragment.paddingLeft,
                binding.navHostFragment.paddingTop,
                binding.navHostFragment.paddingRight,
                bottomNavHeight
            )
        }

        // === –î–æ–±–∞–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ===
        lifecycleScope.launch(Dispatchers.IO) {
            val db = AppDatabase.getInstance(this@MainActivity)
            val dao = db.batchDao()

            val recipeCount = dao.getRecipeCount()
            if (recipeCount == 0) {
                RecipeTemplates.saveToDatabase(this@MainActivity)
            }
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        return navController.navigateUp() || super.onSupportNavigateUp()
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
    private fun applyDarkThemeSetting() {
        val sharedPrefs = PreferenceManager.getDefaultSharedPreferences(this)
        val isDarkTheme = sharedPrefs.getBoolean("dark_theme", false)
        if (isDarkTheme) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)
        } else {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    fun performBackup() {
        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {
            addCategory(Intent.CATEGORY_OPENABLE)
            type = "application/octet-stream"
            putExtra(Intent.EXTRA_TITLE, "ferment_tracker_backup.db")
        }
        startActivityForResult(intent, CREATE_FILE_REQUEST_CODE)
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    fun performRestore() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "application/octet-stream"
        }
        startActivityForResult(intent, PICK_FILE_REQUEST_CODE)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (resultCode == RESULT_OK) {
            when (requestCode) {
                CREATE_FILE_REQUEST_CODE -> {
                    data?.data?.let { uri ->
                        lifecycleScope.launch {
                            try {
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.Main) {
                                    showProgressDialog("–≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                                }

                                // –í—ã–ø–æ–ª–Ω—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.IO) {
                                    exportDatabase(uri)
                                }

                                // –°–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.Main) {
                                    hideProgressDialog()
                                    Toast.makeText(this@MainActivity, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                                    Log.d("DB", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                                }
                            } catch (e: Exception) {
                                withContext(Dispatchers.Main) {
                                    hideProgressDialog()
                                    Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}", Toast.LENGTH_SHORT).show()
                                    Log.d("DB", "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}")
                                }
                            }
                        }
                    }
                }
                PICK_FILE_REQUEST_CODE -> {
                    data?.data?.let { uri ->
                        lifecycleScope.launch {
                            try {
                                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.Main) {
                                    showProgressDialog("–ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
                                }

                                // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.IO) {
                                    importDatabase(uri)
                                }

                                // –°–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                                withContext(Dispatchers.Main) {
                                    hideProgressDialog()
                                    Toast.makeText(this@MainActivity, "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞", Toast.LENGTH_SHORT).show()
                                    Log.d("DB", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                                }
                            } catch (e: Exception) {
                                withContext(Dispatchers.Main) {
                                    hideProgressDialog()
                                    Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${e.message}", Toast.LENGTH_SHORT).show()
                                    Log.d("DB", "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${e.message}")
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private fun exportDatabase(uri: Uri) {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        val dbFile = getDatabasePath("ferment_tracker_db")

        if (!dbFile.exists()) {
            throw IOException("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω")
        }

        val inputStream = contentResolver.openInputStream(Uri.fromFile(dbFile))
        val outputStream = contentResolver.openOutputStream(uri)

        inputStream?.use { input ->
            outputStream?.use { output ->
                input.copyTo(output)
            }
        }
    }

    private suspend fun importDatabase(uri: Uri) {
        val dbFile = getDatabasePath("ferment_tracker_db")

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        AppDatabase.closeInstance()

        // –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        val inputStream = contentResolver.openInputStream(uri)
        val outputStream = FileOutputStream(dbFile)

        inputStream?.use { input ->
            outputStream.use { output ->
                input.copyTo(output)
            }
        }

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        AppDatabase.getInstance(this)
    }

    private fun showProgressDialog(message: String) {
        progressDialog = ProgressDialog(this).apply {
            setMessage(message)
            setCancelable(false)
            show()
        }
    }

    private fun hideProgressDialog() {
        progressDialog?.dismiss()
        progressDialog = null
    }
}